import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '../../styles/task/TaskList.css';
import Task from '../../types/Task';
import deleteTaskById from '../../hooks/task/deleteTask';
import DeleteTask from './DeleteTask';
import PriorityBadge from '../../components/task/PriorityBadge';

const TaskList: React.FC<{
    tasks: Task[];
    onDelete?: (taskId: string) => void;
    emptyMessage?: string;
}> = ({
    tasks,
    onDelete,
    emptyMessage = "Kh√¥ng c√≥ c√¥ng vi·ªác n√†o"
}) => {
        const navigate = useNavigate();
        const [showDeleteModal, setShowDeleteModal] = useState(false);
        const [selectedTaskId, setSelectedTaskId] = useState<string | null>(null);
        const [sortByPriority, setSortByPriority] = useState(true); // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo m·ª©c ∆∞u ti√™n
        const [showOnlyCompleted, setShowOnlyCompleted] = useState(false); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã t·∫•t c·∫£ task
        const [showOnlyIncomplete, setShowOnlyIncomplete] = useState(false); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã t·∫•t c·∫£ task

        // State ƒë·ªÉ l∆∞u danh s√°ch ƒë√£ ƒë∆∞·ª£c l·ªçc & s·∫Øp x·∫øp
        const [filteredTasks, setFilteredTasks] = useState<Task[]>([]);

        // C·∫≠p nh·∫≠t danh s√°ch task d·ª±a tr√™n b·ªô l·ªçc
        useEffect(() => {
            if (!tasks) return;

            let result = [...tasks];

            // L·ªçc theo ho√†n th√†nh
            if (showOnlyCompleted) {
                result = result.filter(task => task.completed);
                // B·ªè ch·ªçn showOnlyIncomplete n·∫øu showOnlyCompleted ƒë∆∞·ª£c ch·ªçn
                if (showOnlyIncomplete) {
                    setShowOnlyIncomplete(false);
                }
            }
            // L·ªçc theo ch∆∞a ho√†n th√†nh
            else if (showOnlyIncomplete) {
                result = result.filter(task => !task.completed);
            }

            // S·∫Øp x·∫øp theo m·ª©c ƒë·ªô ∆∞u ti√™n n·∫øu ƒë∆∞·ª£c ch·ªçn
            if (sortByPriority) {
                result.sort((a, b) => {
                    const priorityOrder: { [key: string]: number } = {
                        'HIGH': 1,
                        'MEDIUM': 2,
                        'LOW': 3
                    };
                    return priorityOrder[a.status] - priorityOrder[b.status];
                });
            }

            setFilteredTasks(result);
        }, [tasks, sortByPriority, showOnlyCompleted, showOnlyIncomplete]);

        // Handler ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn "ƒê√£ ho√†n th√†nh"
        const handleCompletedFilter = () => {
            setShowOnlyCompleted(!showOnlyCompleted);
            if (!showOnlyCompleted) {
                setShowOnlyIncomplete(false); // B·ªè ch·ªçn "Ch∆∞a ho√†n th√†nh" n·∫øu ƒëang ch·ªçn "ƒê√£ ho√†n th√†nh"
            }
        };

        // Handler ƒë·ªÉ x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn "Ch∆∞a ho√†n th√†nh"
        const handleIncompleteFilter = () => {
            setShowOnlyIncomplete(!showOnlyIncomplete);
            if (!showOnlyIncomplete) {
                setShowOnlyCompleted(false); // B·ªè ch·ªçn "ƒê√£ ho√†n th√†nh" n·∫øu ƒëang ch·ªçn "Ch∆∞a ho√†n th√†nh"
            }
        };

        const handleEdit = (taskId: string) => {
            navigate(`/EditTask/${taskId}`);
        };

        const handleDeleteTask = async (id: string) => {
            const response = await deleteTaskById(id);
            if (response.ok) {
                if (onDelete) onDelete(id);
            } else {
                alert('X√≥a th·∫•t b·∫°i!');
            }
            setShowDeleteModal(false);
            setSelectedTaskId(null);
        };

        const openDeleteModal = (id: string) => {
            setSelectedTaskId(id);
            setShowDeleteModal(true);
        };

        const closeDeleteModal = () => {
            setShowDeleteModal(false);
            setSelectedTaskId(null);
        };

        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ c√¥ng vi·ªác
        if (!tasks || tasks.length === 0) {
            return (
                <div className="task-list empty-list">
                    <h2 className="task-list-title">üìù Danh s√°ch c√¥ng vi·ªác</h2>
                    <div className="empty-state">
                        <div className="empty-icon">üìã</div>
                        <p>{emptyMessage}</p>
                    </div>
                </div>
            );
        }

        return (
            <div className="task-list">
                <h2 className="task-list-title">üìù Danh s√°ch c√¥ng vi·ªác</h2>

                {/* Th√™m ph·∫ßn l·ªçc v√† s·∫Øp x·∫øp */}
                <div className="task-filters">
                    <div className="filter-group">
                        <label className="filter-checkbox">
                            <input
                                type="checkbox"
                                checked={sortByPriority}
                                onChange={() => setSortByPriority(!sortByPriority)}
                            />
                            <span>S·∫Øp x·∫øp theo m·ª©c ƒë·ªô ∆∞u ti√™n</span>
                        </label>
                    </div>

                    <div className="filter-options">
                        <label className="filter-checkbox">
                            <input
                                type="checkbox"
                                checked={showOnlyCompleted}
                                onChange={handleCompletedFilter}
                            />
                            <span>Ch·ªâ hi·ªÉn th·ªã c√¥ng vi·ªác ƒë√£ ho√†n th√†nh</span>
                        </label>

                        <label className="filter-checkbox">
                            <input
                                type="checkbox"
                                checked={showOnlyIncomplete}
                                onChange={handleIncompleteFilter}
                            />
                            <span>Ch·ªâ hi·ªÉn th·ªã c√¥ng vi·ªác ch∆∞a ho√†n th√†nh</span>
                        </label>
                    </div>
                </div>

                {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng task */}
                <div className="task-count">
                    <span>T·ªïng s·ªë: <strong>{filteredTasks.length}</strong> c√¥ng vi·ªác</span>
                </div>

                {/* Ki·ªÉm tra n·∫øu kh√¥ng c√≤n task n√†o sau khi l·ªçc */}
                {filteredTasks.length === 0 ? (
                    <div className="empty-state">
                        <div className="empty-icon">üîç</div>
                        <p>Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc</p>
                    </div>
                ) : (
                    <ul className="task-items">
                        {filteredTasks.map((task) => (
                            <li key={task.id} className={`task-item priority-${task.status.toLowerCase()}`}>
                                <h3>{task.title}</h3>
                                <p><strong>Ghi ch√∫:</strong> {task.note}</p>
                                <p><strong>Ho√†n th√†nh:</strong> {task.completed ? "ƒê√£ ho√†n th√†nh" : "Ch∆∞a ho√†n th√†nh"}</p>
                                <p><strong>H·∫°n ch√≥t:</strong> {new Date(task.deadline).toLocaleString('vi-VN')}</p>
                                <p>
                                    <strong>Th·ªÉ lo·∫°i:</strong> <span className="category-name">{task.category?.name || 'Kh√¥ng c√≥'}</span>
                                </p>
                                <p>
                                    <strong>M·ª©c ƒë·ªô ∆∞u ti√™n:</strong> <PriorityBadge priority={task.status} />
                                </p>
                                <div className="task-actions">
                                    <button className="edit-btn" onClick={() => handleEdit(task.id)}>S·ª≠a</button>
                                    <button className="delete-btn" onClick={() => openDeleteModal(task.id)}>X√≥a</button>
                                </div>
                            </li>
                        ))}
                    </ul>
                )}

                {showDeleteModal && selectedTaskId && (
                    <DeleteTask
                        onConfirm={() => handleDeleteTask(selectedTaskId)}
                        onCancel={closeDeleteModal}
                    />
                )}
            </div>
        );
    };

export default TaskList;